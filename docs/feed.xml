<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Today, I Learned</title>
<id>https://jaredkrinke.github.io/til/</id>
<link rel="self" href="https://jaredkrinke.github.io/til/feed.xml"/>
<link rel="alternate" href="https://jaredkrinke.github.io/til/"/>
<author>
<name>Today, I Learned</name>
</author>
<updated>2025-06-11T00:00:00.000Z</updated>

<entry>
<title>Use &quot;VPATH&quot; and &quot;.PATH&quot; for compiling subdirectory source files in Make</title>
<id>https://jaredkrinke.github.io/til/subdir-source-and-make.html</id>
<link rel="alternate" href="https://jaredkrinke.github.io/til/subdir-source-and-make.html"/>
<updated>2025-06-11T00:00:00.000Z</updated>
<summary type="text">Use &quot;VPATH&quot; and &quot;.PATH&quot; for compiling subdirectory source files in Make</summary>
<content type="html">&lt;p&gt;GNU Make (&lt;code&gt;gmake&lt;/code&gt; on BSDs) and BSD Make (&lt;code&gt;bmake&lt;/code&gt; on Linux) handle source files in subdirectories differently:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GNU Make places compiled object files next to the source files, in their subdirectory&lt;/li&gt;
&lt;li&gt;BSD Make places compiled object files in the Makefile&#039;s directory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This inconsistency is a problem for my current project that uses a polyglot Makefile that works on with both Makes.&lt;/p&gt;
&lt;p&gt;I&#039;m trying to explore this space as little as possible, but my current solution is to use &lt;code&gt;VPATH&lt;/code&gt; for GNU Make and &lt;code&gt;.PATH&lt;/code&gt; for BSD Make -- these both support searching for source files in subdirectories (while placing object files in the root--i.e. the same directory as the Makefile). This is handy for e.g. when you&#039;re pulling in code via Git submodules, but you&#039;re compiling a single binary.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-makefile&quot;&gt;# Support both GNU Make and BSD Make

VPATH = .:lua:lpeg:md4c/src:chtml
.PATH = ./ lua/ lpeg/ md4c/src/ chtml/
&lt;/code&gt;&lt;/pre&gt;
</content>
</entry>
<entry>
<title>Git commits have both an author and a committer</title>
<id>https://jaredkrinke.github.io/til/git-commit-vs-author.html</id>
<link rel="alternate" href="https://jaredkrinke.github.io/til/git-commit-vs-author.html"/>
<updated>2025-06-08T00:00:00.000Z</updated>
<summary type="text">Git commits have both an author and a committer</summary>
<content type="html">&lt;p&gt;Commits in Git have both an &lt;strong&gt;author&lt;/strong&gt; and a &lt;strong&gt;committer&lt;/strong&gt;. The distinction makes sense, although it probably doesn&#039;t matter in the vast majority of cases.&lt;/p&gt;
&lt;p&gt;But, of course, GitHub decided to surface &lt;em&gt;both&lt;/em&gt; of these bits of information, so if you want a commit to show up as someone else on GitHub specifically, you&#039;ll need to type in a very long command line (or script) with lots of redundant information (or at least I haven&#039;t found a better solution yet):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;NAME=&#039;John Doe&#039;
EMAIL=&#039;john@doe.com&#039;
DATE=&#039;2025-06-08T00:00:00Z&#039;

GIT_AUTHOR_NAME=&amp;quot;$NAME&amp;quot; GIT_COMMITTER_NAME=&amp;quot;$NAME&amp;quot; GIT_AUTHOR_EMAIL=$EMAIL GIT_COMMITTER_EMAIL=$EMAIL GIT_AUTHOR_DATE=$DATE GIT_COMMITTER_DATE=$DATE git commit -m &#039;Excellent commit description&#039;
&lt;/code&gt;&lt;/pre&gt;
</content>
</entry>
<entry>
<title>Kolmogorov Complexity</title>
<id>https://jaredkrinke.github.io/til/kolmogorov-complexity.html</id>
<link rel="alternate" href="https://jaredkrinke.github.io/til/kolmogorov-complexity.html"/>
<updated>2025-06-06T00:00:00.000Z</updated>
<summary type="text">Kolmogorov Complexity</summary>
<content type="html">&lt;p&gt;While reading &lt;a href=&quot;https://ratfactor.com/cards/pl-small&quot;&gt;Small Programs and Languages&lt;/a&gt; on ratfactor.com, I came across &lt;strong&gt;Kolmogorov Complexity&lt;/strong&gt;, which someone described on Wikipedia as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the length of a shortest computer program (in a predetermined programming language) that produces the object as output&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don&#039;t really have any particular reason to use this concept, but I like the idea that there &lt;em&gt;is&lt;/em&gt; a shortest computer program for outputting some result. Rather than write anymore here, I recommend reading the article linked above.&lt;/p&gt;
</content>
</entry>
<entry>
<title>Get the path of commands using &quot;realpath&quot; and &quot;which&quot;</title>
<id>https://jaredkrinke.github.io/til/absolute-path-of-command.html</id>
<link rel="alternate" href="https://jaredkrinke.github.io/til/absolute-path-of-command.html"/>
<updated>2025-05-31T00:00:00.000Z</updated>
<summary type="text">Get the path of commands using &quot;realpath&quot; and &quot;which&quot;</summary>
<content type="html">&lt;p&gt;Sometimes you need to load resources that are relative to some tool. On POSIX (with a compatible shell), you can use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;realpath $(which command)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This finds the absolute path (including resolving links) to the command named &lt;code&gt;command&lt;/code&gt; which is on &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And if you need to run a command in the directory of a tool:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;pushd $(dirname $(realpath $(which command)))
command ...
popd
&lt;/code&gt;&lt;/pre&gt;
</content>
</entry>
<entry>
<title>Use &quot;exuberant-ctags&quot; for &quot;go to definition&quot; in Vim</title>
<id>https://jaredkrinke.github.io/til/vim-code-indexing.html</id>
<link rel="alternate" href="https://jaredkrinke.github.io/til/vim-code-indexing.html"/>
<updated>2025-05-28T00:00:00.000Z</updated>
<summary type="text">Use &quot;exuberant-ctags&quot; for &quot;go to definition&quot; in Vim</summary>
<content type="html">&lt;p&gt;I re-learned today that &lt;strong&gt;you can get &amp;quot;jump to definition&amp;quot; in Vim using &lt;code&gt;exuberant-ctags&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;code&gt;exuberant-ctags&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;ctags -R *&lt;/code&gt; in your directory&lt;/li&gt;
&lt;li&gt;In Vim, using &lt;code&gt;Ctrl-]&lt;/code&gt; to go to a definition (prefix with &lt;code&gt;Ctrl+W&lt;/code&gt; to open in a new window)&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;Ctrl+T&lt;/code&gt; to go back&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: &lt;strong&gt;&lt;code&gt;ctags&lt;/code&gt; from Emacs doesn&#039;t work&lt;/strong&gt;, so make sure to install something better, like &lt;code&gt;exuberant-ctags&lt;/code&gt; (or possible &lt;code&gt;universal-ctags&lt;/code&gt;--though I haven&#039;t tried that one).&lt;/p&gt;
</content>
</entry>
</feed>
