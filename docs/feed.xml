<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Today, I Learned</title>
<id>https://jaredkrinke.github.io/til/</id>
<link rel="self" href="https://jaredkrinke.github.io/til/feed.xml"/>
<link rel="alternate" href="https://jaredkrinke.github.io/til/"/>
<author>
<name>Today, I Learned</name>
</author>
<updated>2025-07-06T00:00:00.000Z</updated>

<entry>
<title>Use &quot;display: table&quot; to render non-table HTML elements like tables</title>
<id>https://jaredkrinke.github.io/til/css-display-table.html</id>
<link rel="alternate" href="https://jaredkrinke.github.io/til/css-display-table.html"/>
<updated>2025-07-06T00:00:00.000Z</updated>
<summary type="text">Use &quot;display: table&quot; to render non-table HTML elements like tables</summary>
<content type="html">&lt;p&gt;It&#039;s possible to cause non-&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; HTML elements to render like tables using the following (each line on a different element);&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;hl-identifier&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;hl-property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hl-constant&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;hl-identifier&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;hl-property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hl-constant&quot;&gt;table-row&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;hl-identifier&quot;&gt;baz&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;hl-property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hl-constant&quot;&gt;table-cell&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Why would you do this? Well, in my case, I wanted to have an unordered list (&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; and its &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; children) to look appear as a table with two columns. I did this so that text-mode (or old) browsers (like lynx and w3m) would just displaya normal list, while still having nice formatting on modern browsers. The only issue I encountered is that Dillo appears to interpret &amp;quot;unknown&amp;quot; &lt;code&gt;display&lt;/code&gt; values as no formatting at all--but that&#039;s not a big deal since Dillo users are probably used to disabling remote stylesheets anyway.&lt;/p&gt;
&lt;p&gt;In my case, the CSS looked like this (making all &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; elements the same width, without any automatic line-wrapping):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;b class=&quot;hl-tag&quot;&gt;ul&lt;/b&gt;&lt;span class=&quot;hl-operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;hl-identifier&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;hl-property&quot;&gt;padding-left&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;:&lt;/span&gt; &lt;i class=&quot;hl-number&quot;&gt;0em&lt;/i&gt;&lt;span class=&quot;hl-operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;hl-property&quot;&gt;list-style-type&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hl-constant&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;hl-property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hl-constant&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;}&lt;/span&gt;
&lt;b class=&quot;hl-tag&quot;&gt;ul&lt;/b&gt;&lt;span class=&quot;hl-operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;hl-identifier&quot;&gt;posts&lt;/span&gt; &lt;b class=&quot;hl-tag&quot;&gt;li&lt;/b&gt; &lt;span class=&quot;hl-operator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;hl-property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hl-constant&quot;&gt;table-row&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;}&lt;/span&gt;
&lt;b class=&quot;hl-tag&quot;&gt;ul&lt;/b&gt;&lt;span class=&quot;hl-operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;hl-identifier&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;li&lt;/span&gt; &lt;b class=&quot;hl-tag&quot;&gt;time&lt;/b&gt; &lt;span class=&quot;hl-operator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;hl-property&quot;&gt;padding-right&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;:&lt;/span&gt; &lt;i class=&quot;hl-number&quot;&gt;1em&lt;/i&gt;&lt;span class=&quot;hl-operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;hl-property&quot;&gt;white-space&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;nowrap&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;}&lt;/span&gt;
&lt;b class=&quot;hl-tag&quot;&gt;ul&lt;/b&gt;&lt;span class=&quot;hl-operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;hl-identifier&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;li&lt;/span&gt; &lt;b class=&quot;hl-tag&quot;&gt;time&lt;/b&gt;&lt;span class=&quot;hl-operator&quot;&gt;,&lt;/span&gt; &lt;b class=&quot;hl-tag&quot;&gt;ul&lt;/b&gt;&lt;span class=&quot;hl-operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;hl-identifier&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;hl-identifier&quot;&gt;li&lt;/span&gt; &lt;b class=&quot;hl-tag&quot;&gt;a&lt;/b&gt; &lt;span class=&quot;hl-operator&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;hl-property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;hl-constant&quot;&gt;table-cell&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;hl-property&quot;&gt;padding-bottom&lt;/span&gt;&lt;span class=&quot;hl-operator&quot;&gt;:&lt;/span&gt; &lt;i class=&quot;hl-number&quot;&gt;0.5em&lt;/i&gt;&lt;span class=&quot;hl-operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;hl-operator&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
</entry>
<entry>
<title>Use ImageMagick&#039;s &quot;mogrify&quot; tool for converting iPhone photos to JPEG</title>
<id>https://jaredkrinke.github.io/til/convert-iphone-photos-to-jpg.html</id>
<link rel="alternate" href="https://jaredkrinke.github.io/til/convert-iphone-photos-to-jpg.html"/>
<updated>2025-06-27T00:00:00.000Z</updated>
<summary type="text">Use ImageMagick&#039;s &quot;mogrify&quot; tool for converting iPhone photos to JPEG</summary>
<content type="html">&lt;p&gt;To convert from iPhones&#039; &lt;code&gt;.heic&lt;/code&gt; format to &lt;code&gt;.jpg&lt;/code&gt;, use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mogrify -format jpg *.heic
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At some point, iPhones started defaulting to some new format named HEIC that is very poorly supported by default on Windows (and possibly elsewhere). If you need to use these photos outside of Apple&#039;s ecosystem, you can convert them to the universally supported JPEG format using &lt;a href=&quot;https://imagemagick.org/&quot;&gt;ImageMagick&lt;/a&gt;&#039;s &lt;code&gt;mogrify&lt;/code&gt; tool, as in the command line above.&lt;/p&gt;
</content>
</entry>
<entry>
<title>Use &quot;--transform&quot; to put files into subdirectory of a tarball</title>
<id>https://jaredkrinke.github.io/til/tar-into-subdir.html</id>
<link rel="alternate" href="https://jaredkrinke.github.io/til/tar-into-subdir.html"/>
<updated>2025-06-26T00:00:00.000Z</updated>
<summary type="text">Use &quot;--transform&quot; to put files into subdirectory of a tarball</summary>
<content type="html">&lt;p&gt;When packaging software with dependencies on Linux (and probably POSIX), it&#039;s customary to put everything into a named, versioned subdirectory, e.g. so that &lt;code&gt;tar zxf foobar-0.1.tar.gz&lt;/code&gt; unpacks everything into its own directory, named &lt;code&gt;foobar-0.1/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An easy way to create such a tarball is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar czf foobar-$1-linux-x86_64.tar.gz --transform &amp;quot;s,^,foobar-$1/,&amp;quot; &amp;lt;list of files and directories here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
</entry>
<entry>
<title>Use BackstopJS to graphically compare HTML files</title>
<id>https://jaredkrinke.github.io/til/graphically-compare-html-files.html</id>
<link rel="alternate" href="https://jaredkrinke.github.io/til/graphically-compare-html-files.html"/>
<updated>2025-06-13T00:00:00.000Z</updated>
<summary type="text">Use BackstopJS to graphically compare HTML files</summary>
<content type="html">&lt;p&gt;If you&#039;ve got a pile of static HTML files that you want to graphically compare:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href=&quot;https://github.com/garris/BackstopJS&quot;&gt;BackstopJS&lt;/a&gt; (&lt;code&gt;npm install backstopjs&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&quot;https://github.com/fffunction/backstop-crawl&quot;&gt;backstop-crawl&lt;/a&gt; (&lt;code&gt;npm install backstop-crawl&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Serve your HTML using Python (&lt;code&gt;python -m http.server -b 127.0.0.1 8888&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Crawl the site to generate a Backstop config (&lt;code&gt;npx backstop-crawl http://127.0.0.1:8888/&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Modify the &lt;code&gt;engine&lt;/code&gt; field in the generated config to be &lt;code&gt;puppet&lt;/code&gt; instead of &lt;code&gt;phantomjs&lt;/code&gt; (PhantomJS is no longer supported)&lt;/li&gt;
&lt;li&gt;Generate images (&lt;code&gt;npx backstop test&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Set generated images as a baseline (&lt;code&gt;npx backstop approve&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, finally, you&#039;re set up and can test:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Regenerate your HTML files (or restart the web server to read from a different directory)&lt;/li&gt;
&lt;li&gt;Generate test images and compare them (&lt;code&gt;npx backstop test&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my case, I have been reimplementing my static site generator and I want to ensure the output is roughly the same. I had been using &lt;code&gt;diff -r&lt;/code&gt;, but I don&#039;t actually care about line-by-line, character-by-character differences, e.g. &lt;code&gt;&amp;amp;apos;&lt;/code&gt; and &lt;code&gt;&amp;amp;#39;&lt;/code&gt; are visually the same. I&#039;m also reimplementing syntax highlighting and expect those to be slightly different. Hence, I&#039;m using the tools above.&lt;/p&gt;
</content>
</entry>
<entry>
<title>Use &quot;:read !&quot; to insert the result of a shell command in Vim</title>
<id>https://jaredkrinke.github.io/til/vim-read-shell-cmd.html</id>
<link rel="alternate" href="https://jaredkrinke.github.io/til/vim-read-shell-cmd.html"/>
<updated>2025-06-12T00:00:00.000Z</updated>
<summary type="text">Use &quot;:read !&quot; to insert the result of a shell command in Vim</summary>
<content type="html">&lt;p&gt;Sometimes, I need to insert a list of files into a text file I&#039;m editing in Vim. Here&#039;s how to do it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:read !ls *.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any command can follow the &lt;code&gt;!&lt;/code&gt;.&lt;/p&gt;
</content>
</entry>
</feed>
